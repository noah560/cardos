from machine import Pin, SPI
import st7789py as st7789
import font

def bmpChar(bmp, width):
    pixels = []
    for i in range(len(bmp)):
        if bmp[i] == "1":
            pixels.append((i%width, i//width))
    return Character(pixels, width, len(bmp)//width)


class Character:
    def __init__(self, pixels, width, height):
        self.pixels = pixels
        self.width = width
        self.height = height
    def draw(self, screen, x, y, r, g, b):
        for pixel in self.pixels:
            screen.setPixel(x+pixel[0], y+pixel[1], r, g, b)
    def drawX2(self, screen, x, y, r, g, b):
        for pixel in self.pixels:
            screen.setPixel(x+pixel[0]*2, y+pixel[1]*2, r, g, b)
            screen.setPixel(x+pixel[0]*2+1, y+pixel[1]*2, r, g, b)
            screen.setPixel(x+pixel[0]*2, y+pixel[1]*2+1, r, g, b)
            screen.setPixel(x+pixel[0]*2+1, y+pixel[1]*2+1, r, g, b)


class Screen:
    def __init__(self):
        self.tft = st7789.ST7789(
            SPI(2, baudrate=40000000, sck=Pin(36), mosi=Pin(35), miso=None),
            135,
            240,
            reset=Pin(33, Pin.OUT),
            cs=Pin(37, Pin.OUT),
            dc=Pin(34, Pin.OUT),
            backlight=Pin(38, Pin.OUT),
            rotation=1,
            color_order=st7789.BGR
            )
        self.width = 240
        self.height = 135
    def setPixel(self, x, y, r, g, b):
        clr = st7789.color565(r, g, b)
        self.tft.pixel(x, y, clr)
    def rect(self, x, y, w, h, r, g, b):
        clr = st7789.color565(r, g, b)
        self.tft.rect(x, y, w, h, clr)
    def fillRect(self, x, y, w, h, r, g, b):
        clr = st7789.color565(r, g, b)
        self.tft.fill_rect(x, y, w, h, clr)
    def text(self, font, txt, x, y, r, g, b):
        charX = x+0
        for char in txt:
            # draw the character
            font[char].draw(self, charX, y, r, g, b)
            charX += font[char].width+1
    def textX2(self, font, txt, x, y, r, g, b):
        charX = x+0
        for char in txt:
            # draw the character
            font[char].drawX2(self, charX, y, r, g, b)
            charX += font[char].width*2+2
    def txt(self, txt, x, y, r1, g1, b1, r2, g2, b2):
        clr1 = st7789.color565(r1, g1, b1)
        clr2 = st7789.color565(r2, g2, b2)
        self.tft.text(font, txt, x, y, clr1, clr2)
        


myFont = {
    "A": bmpChar("01101001100111111001100110011001", 4),
    "B": bmpChar("11101001100111101001100110011110", 4),
    "C": bmpChar("01111000100010001000100010000111", 4),
    "D": bmpChar("11101001100110011001100110011110", 4),
    "E": bmpChar("11111000100011111000100010001111", 4),
    "F": bmpChar("11111000100011111000100010001000", 4),
    "G": bmpChar("01111000100010001001100110010110", 4),
    "H": bmpChar("10011001100111111001100110011001", 4),
    "I": bmpChar("11110110011001100110011001101111", 4),
    "J": bmpChar("01110010001000100010101010100100", 4),
    "K": bmpChar("10011010101011001100101010101001", 4),
    "L": bmpChar("10001000100010001000100010001111", 4),
    "M": bmpChar("10011111111111111001100110011001", 4),
    "N": bmpChar("11011101110111011011101110111011", 4),
    "O": bmpChar("01101001100110011001100110010110", 4),
    "P": bmpChar("11101001100111101000100010001000", 4),
    "Q": bmpChar("00000000011010011001101101110001", 4),
    "R": bmpChar("11101001100111101100101010101001", 4),
    "S": bmpChar("01111000100001100001000100011110", 4),
    "T": bmpChar("11110110011001100110011001100110", 4),
    "U": bmpChar("10011001100110011001100110010110", 4),
    "V": bmpChar("10011001100110011001100101100110", 4),
    "W": bmpChar("10011001100110011001111111111001", 4),
    "X": bmpChar("10011001100101100110100110011001", 4),
    "Y": bmpChar("10011001011001100110011001100110", 4),
    "Z": bmpChar("11110001001000100100010010001111", 4),
    "a": bmpChar("01100001000101111001100110010111", 4),
    "b": bmpChar("10001000100011101001100110011110", 4),
    "c": bmpChar("00000000000001111000100010000111", 4),
    "d": bmpChar("00010001000101111001100110010111", 4),
    "e": bmpChar("00000000000001101001111110000111", 4),
    "f": bmpChar("00100101010011100100010001000100", 4),
    "g": bmpChar("00000000011110010111000100010110", 4),
    "h": bmpChar("10001000100011101001100110011001", 4),
    "i": bmpChar("01100110000000000110011001100110", 4),
    "j": bmpChar("00010000000100011001100110010110", 4),
    "k": bmpChar("10001000100110101100110010101001", 4),
    "l": bmpChar("01000100010001000100010001000100", 4),
    "m": bmpChar("00000000000000001001111111111001", 4),
    "n": bmpChar("00000000000000001110100110011001", 4),
    "o": bmpChar("00000000000000000110100110010110", 4),
    "p": bmpChar("00000000111010011001111010001000", 4),
    "q": bmpChar("00000000011110011001011100010001", 4),
    "r": bmpChar("10011010110010001000100010001000", 4),
    "s": bmpChar("00000000000001111000011000011110", 4),
    "t": bmpChar("01100110111101100110011001100110", 4),
    "u": bmpChar("00000000100110011001100110010111", 4),
    "v": bmpChar("00000000100110011001100101100110", 4),
    "w": bmpChar("00000000100110011001111111111001", 4),
    "x": bmpChar("00000000100110010110011010011001", 4),
    "y": bmpChar("00000000100110010110001001001000", 4),
    "z": bmpChar("00000000000000001111001001001111", 4),
    "1": bmpChar("01101010001000100010001000101111", 4),
    "2": bmpChar("01101001001000100010010001001111", 4),
    "3": bmpChar("11100001000111100001000100011110", 4),
    "4": bmpChar("00100110101010101111001000100010", 4),
    "5": bmpChar("11111000100011100001000100011110", 4),
    "6": bmpChar("01111000100011101001100110010110", 4),
    "7": bmpChar("11110001001000100100010010001000", 4),
    "8": bmpChar("01101001100101101001100110010110", 4),
    "9": bmpChar("01101001100101110001000100010110", 4),
    "0": bmpChar("01101101110111011011101110110110", 4),
    " ": bmpChar("00000000000000000000000000000000", 4),
    "`": bmpChar("10000100000000000000000000000000", 4),
    "~": bmpChar("00000000010110100000000000000000", 4),
    "!": bmpChar("01100110011001100110000001100110", 4),
    "@": bmpChar("00000000111110011011101110001111", 4),
    "#": bmpChar("00000000000001011111010111110101", 4),
    "$": bmpChar("01100111100001100001111001100110", 4),
    "%": bmpChar("11011101001000100100010010111011", 4),
    "^": bmpChar("01101001000000000000000000000000", 4),
    "&": bmpChar("01101110000111100001111000000110", 4),
    "*": bmpChar("10010110011010010000000000000000", 4),
    "(": bmpChar("00100100010001000100010001000010", 4),
    ")": bmpChar("01000010001000100010001000100100", 4),
    "_": bmpChar("00000000000000000000000000001111", 4),
    "-": bmpChar("00000000000001100000000000000000", 4),
    "=": bmpChar("00000000111100000000111100000000", 4),
    "+": bmpChar("00000000011011111111011000000000", 4),
    "[": bmpChar("01100100010001000100010001000110", 4),
    "]": bmpChar("01100010001000100010001000100110", 4),
    "{": bmpChar("01100100010011001100010001000110", 4),
    "}": bmpChar("01100010001000110011001000100110", 4),
    "\\": bmpChar("10001000010001000010001000010001", 4),
    "|": bmpChar("01100110011001100110011001100110", 4),
    ";": bmpChar("00000110011000000010001001100000", 4),
    ":": bmpChar("00000000011001100000000001100110", 4),
    "'": bmpChar("00100010000000000000000000000000", 4),
    "\"": bmpChar("01010101000000000000000000000000", 4),
    ",": bmpChar("00000000000000000000001000100110", 4),
    ".": bmpChar("00000000000000000000000000110011", 4),
    "<": bmpChar("00000000000000000011110011000011", 4),
    ">": bmpChar("00000000000000001100001100111100", 4),
    "/": bmpChar("00010001001000100100010010001000", 4),
    "?": bmpChar("01101001001001000100010000000100", 4),
}



